# Definition for a Node.
class Node(object):
    def __init__(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []


class Solution(object):

    def __init__(self):
        self.visited = {}

    def cloneGraph(self, node):
        """
        :type node: Node
        :rtype: Node
        """

        if not node:
            return node

        if node in self.visited:
            return self.visited[node]

        cloned_node = Node(node.val, [])
        self.visited[node] = cloned_node
        cloned_node.neighbors = [self.cloneGraph(
            neighbour) for neighbour in node.neighbors]

        return cloned_node
